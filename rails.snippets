priority -50

snippet anaf "accepts_nested_attributes_for"
accepts_nested_attributes_for :${1:association_name}${2:${3:, :allow_destroy => true}${4:, :reject_if => proc \{ |obj| ${5:obj.blank?} \}}}

endsnippet

snippet cla "Create controller class"
class ${1:Model}Controller < ApplicationController
	before_filter :${2:model}

	$0

	private
	def ${2}
		@$2 = ${3:$1}.find(params[:id]) if params[:id]
	end
end
endsnippet

snippet tcda "Create date column"
t.date :${1:title}
$0
endsnippet

snippet tcdt "Create datetime column"
t.datetime :${1:title}
$0
endsnippet

snippet tcd "Create decimal column"
t.decimal :${1:title}${2:${3:, :precision => ${4:10}}${5:, :scale => ${6:2}}}
$0
endsnippet

snippet tcf "Create float column"
t.float :${1:title}
$0
endsnippet

snippet tcbi "Create binary column"
t.binary :${1:title}${2:, :limit => ${3:2}.megabytes}
$0
endsnippet

snippet tcb "Create boolean column"
t.boolean :${1:title}
$0
endsnippet

snippet tci "Create integer column"
t.integer :${1:title}
$0
endsnippet


snippet cla "Create functional test class"
require 'test_helper'

class ${1:Model}ControllerTest < ActionController::TestCase
	test$0
end
endsnippet

snippet resources "Create resources controller class"
class ${1:Model}sController < ApplicationController
	before_filter :${1/./\l$0/}, :only => [:show, :edit, :update, :destroy]

	# GET /${1/./\l$0/}s
	def index
	  @${1/./\l$0/}s = ${1:Model}.all

	  respond_to do |resp|
	    resp.html # index.html.erb
	    resp.json  { render :json => @${1/./\l$0/}s }
	  end
	end

	# GET /${1/./\l$0/}s/1
	# GET /${1/./\l$0/}s/1.json
	def show
	  respond_to do |resp|
	    resp.html # show.html.erb
	    resp.json  { render :json => @${1/./\l$0/} }
	  end
	end

	# GET /${1/./\l$0/}s/new
	# GET /${1/./\l$0/}s/new.json
	def new
	  @${1/./\l$0/} = ${1:Model}.new

	  respond_to do |resp|
	    resp.html # new.html.erb
	    resp.json  { render :json => @${1/./\l$0/} }
	  end
	end

	# GET /${1/./\l$0/}s/1/edit
	def edit
	end

	# POST /${1/./\l$0/}s
	# POST /${1/./\l$0/}s.json
	def create
	  @${1/./\l$0/} = ${1:Model}.new(params[:${1/./\l$0/}])

	  respond_to do |resp|
	    if @${1/./\l$0/}.save
	      flash[:notice] = '${1:Model} was successfully created.'
	      resp.html { redirect_to(@${1/./\l$0/}) }
	      resp.json  { render :json => @${1/./\l$0/}, :status => :created, :location => @${1/./\l$0/} }
	    else
	      resp.html { render :action => "new" }
	      resp.json  { render :json => @${1/./\l$0/}.errors, :status => :unprocessable_entity }
	    end
	  end
	end

	# PUT /${1/./\l$0/}s/1
	# PUT /${1/./\l$0/}s/1.json
	def update
	  respond_to do |resp|
	    if @${1/./\l$0/}.update_attributes(params[:${1/./\l$0/}])
	      flash[:notice] = '${1:Model} was successfully updated.'
	      resp.html { redirect_to(@${1/./\l$0/}) }
	      resp.json  { head :ok }
	    else
	      resp.html { render :action => "edit" }
	      resp.json  { render :json => @${1/./\l$0/}.errors, :status => :unprocessable_entity }
	    end
	  end
	end

	# DELETE /${1/./\l$0/}s/1
	# DELETE /${1/./\l$0/}s/1.json
	def destroy
	  @${1/./\l$0/}.destroy

	  respond_to do |resp|
	    resp.html { redirect_to(${1/./\l$0/}s_url) }
	    resp.json  { head :ok }
	  end
	end

	private

	def ${1/./\l$0/}
	  @${1/./\l$0/} = ${1:Model}.find(params[:id])
	end

end
endsnippet

snippet tcs "Create string column"
t.string :${1:title}
$0
endsnippet

snippet tct "Create text column"
t.text :${1:title}
$0
endsnippet

snippet tcti "Create time column"
t.time :${1:title}
$0
endsnippet

snippet tcts "Create timestamp column"
t.timestamp :${1:title}
$0
endsnippet

snippet tctss "Create timestamps columns"
t.timestamps
$0
endsnippet

snippet tre "Table column(s) rename"
t.rename(:${1:old_column_name}, :${2:new_column_name})
$0
endsnippet

snippet befc "before_create"
before_create $0
endsnippet

snippet befd "before_destroy"
before_destroy $0
endsnippet

snippet befs "before_save"
before_save $0
endsnippet

snippet befu "before_update"
before_update $0
endsnippet

snippet befv "before_validation"
before_validation $0
endsnippet

snippet befvoc "before_validation_on_create"
before_validation_on_create $0
endsnippet

snippet befvou "before_validation_on_update"
before_validation_on_update
endsnippet

snippet bt "belongs_to (bt)"
belongs_to :${1:object}${2:, :class_name => "${3:${1/[[:alpha:]]+|(_)/(?1::\u$0)/g}}", :foreign_key => "${4:${1}_id}"}
endsnippet

snippet aftc "after_create"
after_create $0
endsnippet

snippet aftd "after_destroy"
after_destroy $0
endsnippet

snippet afts "after_save"
after_save $0
endsnippet

snippet aftu "after_update"
after_update $0
endsnippet

snippet aftv "after_validation"
after_validation $0
endsnippet

snippet aftvoc "after_validation_on_create"
after_validation_on_create $0
endsnippet

snippet aftvou "after_validation_on_update"
after_validation_on_update $0
endsnippet

snippet habtm "has_and_belongs_to_many (habtm)"
has_and_belongs_to_many :${1:object}${2:, :join_table => "${3:table_name}", :foreign_key => "${4:${1}_id}"}
endsnippet

snippet hm "has_many (hm)"
has_many :${1:object}s${2:, :class_name => "${1}", :foreign_key => "${4:reference}_id"}
endsnippet

snippet hmt "has_many (through)"
has_many :${1:objects}, :through => :${2:join_association}${3:, :source => :${4:${2}_table_foreign_key_to_${1}_table}}
endsnippet

snippet hmd "has_many :dependent => :destroy"
has_many :${1:object}s${2:, :class_name => "${1}", :foreign_key => "${4:reference}_id"}, :dependent => :destroy$0
endsnippet

snippet ho "has_one (ho)"
has_one :${1:object}${2:, :class_name => "${3:${1/[[:alpha:]]+|(_)/(?1::\u$0)/g}}", :foreign_key => "${4:${1}_id}"}
endsnippet

snippet logd "logger.debug"
${1:Rails.}logger.debug { "${1:message}" }$0
endsnippet

snippet loge "logger.error"
logger.error { "${1:message}" }$0
endsnippet

snippet logf "logger.fatal"
logger.fatal { "${1:message}" }$0
endsnippet

snippet logi "logger.info"
logger.info { "${1:message}" }$0
endsnippet

snippet logw "logger.warn"
logger.warn { "${1:message}" }$0
endsnippet

snippet mp "map(&:sym_proc)"
map(&:${1:id})
endsnippet

snippet flash "flash[...]"
flash[:${1:notice}] = "${2:Successfully created...}"$0
endsnippet

snippet renpp "redirect_to (nested path plural)"
redirect_to(${2:${10:parent}_${11:child}_path(${12:@}${13:${10}})})
endsnippet

snippet renp "redirect_to (nested path)"
redirect_to(${2:${12:parent}_${13:child}_path(${14:@}${15:${12}}, ${16:@}${17:${13}})})
endsnippet

snippet repp "redirect_to (path plural)"
redirect_to(${2:${10:model}s_path})
endsnippet

snippet rep "redirect_to (path)"
redirect_to(${2:${12:model}_path(${13:@}${14:${12}})})
endsnippet
